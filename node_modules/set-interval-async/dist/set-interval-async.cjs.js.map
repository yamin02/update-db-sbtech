{"version":3,"file":"set-interval-async.cjs.js","sources":["../src/error.js","../src/validation.js","../src/clear.js","../src/timer.js","../src/util.js","../src/dynamic.js","../src/fixed.js","../src/legacy.js","../src/index.js"],"sourcesContent":["/**\n * Copyright (c) 2019 Emilio Almansi. All rights reserved.\n * This work is licensed under the terms of the MIT license.\n * For a copy, see the file LICENSE in the root directory.\n */\n\n/**\n * Error thrown by setIntervalAsync when invalid arguments are provided.\n */\nclass SetIntervalAsyncError extends Error {\n}\n\nObject.defineProperty(\n  SetIntervalAsyncError.prototype,\n  'name',\n  {\n    value: 'SetIntervalAsyncError'\n  }\n)\n\nexport default SetIntervalAsyncError\n","/**\n * Copyright (c) 2019-2021 Emilio Almansi. All rights reserved.\n * This work is licensed under the terms of the MIT license.\n * For a copy, see the file LICENSE in the root directory.\n */\n\nimport SetIntervalAsyncError from './error'\n\nconst MIN_INTERVAL_MS = 10\n\n/**\n * @private\n *\n * @param {function} handler - Handler function to be executed in intervals.<br>\n *                             May be asynchronous.\n */\nexport function validateHandler (handler) {\n  if (!(\n    typeof handler === 'function'\n  )) {\n    throw new SetIntervalAsyncError(\n      'Invalid argument: \"handler\". Expected a function.'\n    )\n  }\n}\n\n/**\n * @private\n *\n * @param {number} interval - Interval in milliseconds. Must be at least 10 ms.\n */\nexport function validateInterval (interval) {\n  if (!(\n    typeof interval === 'number' && MIN_INTERVAL_MS <= interval\n  )) {\n    throw new SetIntervalAsyncError(\n      `Invalid argument: \"interval\". Expected a number greater than or equal to ${MIN_INTERVAL_MS}.`\n    )\n  }\n}\n\n/**\n * @private\n *\n * @param {SetIntervalAsyncTimer} timer\n */\nexport function validateTimer (timer) {\n  if (!(\n    timer &&\n    'stopped' in timer &&\n    'timeouts' in timer &&\n    'promises' in timer\n  )) {\n    throw new SetIntervalAsyncError(\n      'Invalid argument: \"timer\". Expected an instance of SetIntervalAsyncTimer.'\n    )\n  }\n}\n","/**\n * Copyright (c) 2019-2021 Emilio Almansi. All rights reserved.\n * This work is licensed under the terms of the MIT license.\n * For a copy, see the file LICENSE in the root directory.\n */\n\nimport { validateTimer } from './validation'\n\n/**\n * Stops an execution cycle started by setIntervalAsync.<br>\n * Any ongoing function executions will run until completion,\n * but all future ones will be cancelled.\n *\n * @param {SetIntervalAsyncTimer} timer\n * @returns {Promise}\n *          A promise which resolves when all pending executions have finished.\n */\nexport async function clearIntervalAsync (timer) {\n  validateTimer(timer)\n  timer.stopped = true\n  for (const iterationId in timer.timeouts) {\n    clearTimeout(timer.timeouts[iterationId])\n    delete timer.timeouts[iterationId]\n  }\n  for (const iterationId in timer.promises) {\n    try {\n      await timer.promises[iterationId]\n    } catch (_) {\n      // Do nothing.\n    }\n    delete timer.promises[iterationId]\n  }\n}\n","/**\n * Copyright (c) 2019 Emilio Almansi. All rights reserved.\n * This work is licensed under the terms of the MIT license.\n * For a copy, see the file LICENSE in the root directory.\n */\n\n/**\n * Timer object returned by setIntervalAsync.<br>\n * Can be used together with {@link clearIntervalAsync} to stop execution.\n */\nclass SetIntervalAsyncTimer {\n  constructor () {\n    this.stopped = false\n    this.timeouts = {}\n    this.promises = {}\n  }\n}\n\nexport default SetIntervalAsyncTimer\n","/**\n * Copyright (c) 2021 Emilio Almansi. All rights reserved.\n * This work is licensed under the terms of the MIT license.\n * For a copy, see the file LICENSE in the root directory.\n */\n\n/**\n * @private\n *\n * @param {SetIntervalAsyncTimer} timer\n */\nexport function getNextIterationId (iterationId) {\n  if (iterationId === Number.MAX_SAFE_INTEGER) {\n    return 0\n  }\n  return iterationId + 1\n}\n\n/**\n * @private\n */\nexport async function noop () {\n}\n","/**\n * Copyright (c) 2019-2021 Emilio Almansi. All rights reserved.\n * This work is licensed under the terms of the MIT license.\n * For a copy, see the file LICENSE in the root directory.\n */\n\nimport { clearIntervalAsync } from './clear'\nimport SetIntervalAsyncError from './error'\nimport SetIntervalAsyncTimer from './timer'\nimport { getNextIterationId, noop } from './util'\nimport { validateHandler, validateInterval } from './validation'\n\n/**\n * Attempts to execute the given handler at regular intervals, while preventing<br>\n * multiple concurrent executions. The handler will never be executed concurrently<br>\n * more than once in any given moment. If the running time of any execution exceeds<br>\n * the desired interval, the following execution will be scheduled as soon as<br>\n * possible; ie. immediately after the previous execution concludes.\n *\n * @param {function} handler - Handler function to be executed in intervals.<br>\n *                             May be asynchronous.\n * @param {number} interval - Interval in milliseconds. Must be at least 10 ms.\n * @param {...*} args - Any number of arguments to pass on to the handler.\n * @returns {SetIntervalAsyncTimer}\n *          A timer object which can be used to stop execution with {@link clearIntervalAsync}.\n *\n * @alias [Dynamic] setIntervalAsync\n */\nfunction setIntervalAsync (handler, interval, ...args) {\n  validateHandler(handler)\n  validateInterval(interval)\n  const timer = new SetIntervalAsyncTimer()\n  const iterationId = 0\n  timer.timeouts[iterationId] = setTimeout(\n    timeoutHandler,\n    interval,\n    timer,\n    iterationId,\n    handler,\n    interval,\n    ...args\n  )\n  return timer\n}\n\n/**\n * @private\n *\n * @param {SetIntervalAsyncTimer} timer\n * @param {number} iterationId\n * @param {function} handler\n * @param {number} interval\n * @param {...*} args\n */\nfunction timeoutHandler (timer, iterationId, handler, interval, ...args) {\n  delete timer.timeouts[iterationId]\n  timer.promises[iterationId] = runHandler(\n    timer,\n    iterationId,\n    handler,\n    interval,\n    ...args\n  )\n}\n\n/**\n * @private\n *\n * @param {SetIntervalAsyncTimer} timer\n * @param {number} iterationId\n * @param {function} handler\n * @param {number} interval\n * @param {...*} args\n */\nasync function runHandler (timer, iterationId, handler, interval, ...args) {\n  // The next line ensures that timer.promises[iterationId] is set\n  // before running the handler.\n  await noop()\n  const startTime = new Date()\n  try {\n    await handler(...args)\n  } finally {\n    if (!timer.stopped) {\n      const endTime = new Date()\n      const executionTime = endTime - startTime\n      const timeout = interval > executionTime\n        ? interval - executionTime\n        : 0\n      const nextIterationId = getNextIterationId(iterationId)\n      timer.timeouts[nextIterationId] = setTimeout(\n        timeoutHandler,\n        timeout,\n        timer,\n        nextIterationId,\n        handler,\n        interval,\n        ...args\n      )\n    }\n    delete timer.promises[iterationId]\n  }\n}\n\nexport { setIntervalAsync, clearIntervalAsync, SetIntervalAsyncTimer, SetIntervalAsyncError }\n","/**\n * Copyright (c) 2019-2021 Emilio Almansi. All rights reserved.\n * This work is licensed under the terms of the MIT license.\n * For a copy, see the file LICENSE in the root directory.\n */\n\nimport { clearIntervalAsync } from './clear'\nimport SetIntervalAsyncError from './error'\nimport SetIntervalAsyncTimer from './timer'\nimport { getNextIterationId, noop } from './util'\nimport { validateHandler, validateInterval } from './validation'\n\n/**\n * Executes the given handler at fixed intervals, while preventing<br>\n * multiple concurrent executions. The handler will never be executed<br>\n * concurrently more than once in any given moment, providing a fixed<br>\n * time interval between the <strong>end</strong> of a given execution and the <strong>start</strong> of<br>\n * the following one.\n *\n * @param {function} handler - Handler function to be executed in intervals.<br>\n *                             May be asynchronous.\n * @param {number} interval - Interval in milliseconds. Must be at least 10 ms.\n * @param {...*} args - Any number of arguments to pass on to the handler.\n * @returns {SetIntervalAsyncTimer}\n *          A timer object which can be used to stop execution with {@link clearIntervalAsync}.\n *\n * @alias [Fixed] setIntervalAsync\n */\nfunction setIntervalAsync (handler, interval, ...args) {\n  validateHandler(handler)\n  validateInterval(interval)\n  const timer = new SetIntervalAsyncTimer()\n  const iterationId = 0\n  timer.timeouts[iterationId] = setTimeout(\n    timeoutHandler,\n    interval,\n    timer,\n    iterationId,\n    handler,\n    interval,\n    ...args\n  )\n  return timer\n}\n\n/**\n * @private\n *\n * @param {SetIntervalAsyncTimer} timer\n * @param {number} iterationId\n * @param {function} handler\n * @param {number} interval\n * @param {...*} args\n */\nfunction timeoutHandler (timer, iterationId, handler, interval, ...args) {\n  delete timer.timeouts[iterationId]\n  timer.promises[iterationId] = runHandler(\n    timer,\n    iterationId,\n    handler,\n    interval,\n    ...args\n  )\n}\n\n/**\n * @private\n *\n * @param {SetIntervalAsyncTimer} timer\n * @param {number} iterationId\n * @param {function} handler\n * @param {number} interval\n * @param {...*} args\n */\nasync function runHandler (timer, iterationId, handler, interval, ...args) {\n  // The next line ensures that timer.promises[iterationId] is set\n  // before running the handler.\n  await noop()\n  try {\n    await handler(...args)\n  } finally {\n    if (!timer.stopped) {\n      const nextIterationId = getNextIterationId(iterationId)\n      timer.timeouts[nextIterationId] = setTimeout(\n        timeoutHandler,\n        interval,\n        timer,\n        nextIterationId,\n        handler,\n        interval,\n        ...args\n      )\n    }\n    delete timer.promises[iterationId]\n  }\n}\n\nexport { setIntervalAsync, clearIntervalAsync, SetIntervalAsyncTimer, SetIntervalAsyncError }\n","/**\n * Copyright (c) 2019-2021 Emilio Almansi. All rights reserved.\n * This work is licensed under the terms of the MIT license.\n * For a copy, see the file LICENSE in the root directory.\n */\n\nimport { clearIntervalAsync } from './clear'\nimport SetIntervalAsyncError from './error'\nimport SetIntervalAsyncTimer from './timer'\nimport { getNextIterationId, noop } from './util'\nimport { validateHandler, validateInterval } from './validation'\n\n/**\n * Executes the given handler at fixed intervals; ie. the start time<br>\n * between consecutive executions is always a fixed amount of time.<br>\n * If a given execution takes longer than the given time interval to<br>\n * complete, then the handler will be invoked again without waiting<br>\n * for the previous one to finish. In this scenario, multiple concurrent<br>\n * executions can and will ocurr, so this function should only be used<br>\n * when the given handler is reentrancy-safe.\n *\n * @param {function} handler - Handler function to be executed in intervals.<br>\n *                             May be asynchronous.\n * @param {number} interval - Interval in milliseconds. Must be at least 10 ms.\n * @param {...*} args - Any number of arguments to pass on to the handler.\n * @returns {SetIntervalAsyncTimer}\n *          A timer object which can be used to stop execution with {@link clearIntervalAsync}.\n *\n * @alias [Legacy] setIntervalAsync\n */\nfunction setIntervalAsync (handler, interval, ...args) {\n  validateHandler(handler)\n  validateInterval(interval)\n  const timer = new SetIntervalAsyncTimer()\n  const iterationId = 0\n  timer.timeouts[iterationId] = setTimeout(\n    timeoutHandler,\n    interval,\n    timer,\n    iterationId,\n    handler,\n    interval,\n    ...args\n  )\n  return timer\n}\n\n/**\n * @private\n *\n * @param {SetIntervalAsyncTimer} timer\n * @param {number} iterationId\n * @param {function} handler\n * @param {number} interval\n * @param {...*} args\n */\nfunction timeoutHandler (timer, iterationId, handler, interval, ...args) {\n  delete timer.timeouts[iterationId]\n  timer.promises[iterationId] = runHandler(\n    timer,\n    iterationId,\n    handler,\n    interval,\n    ...args\n  )\n}\n\n/**\n * @private\n *\n * @param {SetIntervalAsyncTimer} timer\n * @param {number} iterationId\n * @param {function} handler\n * @param {number} interval\n * @param {...*} args\n */\nasync function runHandler (timer, iterationId, handler, interval, ...args) {\n  // The next line ensures that timer.promises[iterationId] is set\n  // before running the handler.\n  await noop()\n  const nextIterationId = getNextIterationId(iterationId)\n  timer.timeouts[nextIterationId] = setTimeout(\n    timeoutHandler,\n    interval,\n    timer,\n    nextIterationId,\n    handler,\n    interval,\n    ...args\n  )\n  try {\n    await handler(...args)\n  } finally {\n    delete timer.promises[iterationId]\n  }\n}\n\nexport { setIntervalAsync, clearIntervalAsync, SetIntervalAsyncTimer, SetIntervalAsyncError }\n","/**\n * Copyright (c) 2019 Emilio Almansi. All rights reserved.\n * This work is licensed under the terms of the MIT license.\n * For a copy, see the file LICENSE in the root directory.\n */\n\nimport { clearIntervalAsync } from './clear'\nimport { setIntervalAsync as setIntervalAsyncD } from './dynamic'\nimport { setIntervalAsync as setIntervalAsyncF } from './fixed'\nimport { setIntervalAsync as setIntervalAsyncL } from './legacy'\nimport SetIntervalAsyncError from './error'\nimport SetIntervalAsyncTimer from './timer'\n\nconst dynamic = { setIntervalAsync: setIntervalAsyncD }\nconst fixed = { setIntervalAsync: setIntervalAsyncF }\nconst legacy = { setIntervalAsync: setIntervalAsyncL }\n\nexport {\n  dynamic,\n  fixed,\n  legacy,\n  clearIntervalAsync,\n  SetIntervalAsyncError,\n  SetIntervalAsyncTimer\n}\n"],"names":["SetIntervalAsyncError","Error","Object","defineProperty","prototype","value","MIN_INTERVAL_MS","validateHandler","handler","validateInterval","interval","validateTimer","timer","clearIntervalAsync","stopped","iterationId","timeouts","clearTimeout","promises","_","SetIntervalAsyncTimer","constructor","getNextIterationId","Number","MAX_SAFE_INTEGER","noop","setIntervalAsync","args","setTimeout","timeoutHandler","runHandler","startTime","Date","endTime","executionTime","timeout","nextIterationId","dynamic","setIntervalAsyncD","fixed","setIntervalAsyncF","legacy","setIntervalAsyncL"],"mappings":"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"}